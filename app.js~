
// === CONFIG dinâmico ===
let CSV_PATH = 'data/projeto_monitor.csv'; // "Todos" (tabela completa)

// Mapeamento dos eixos para os arquivos que você TEM
const MAP_EIXOS = {
    'all': 'data/projeto_monitor.csv',                             // Todos os dados
    '1': 'data/eixo_Identificacao_Escola.csv',                    // Eixo 1
    '2': 'data/eixo_Estrutura_Fisica_Funcionamento.csv',         // Eixo 2
    '3': 'data/eixo_Alunos.csv',                   // Eixo 3
    '4': 'data/eixo_Professores.csv',              // Eixo 4
    '5': 'data/eixo_Gestao_Equipe.csv',            // Eixo 5
    '6': 'data/eixo_Pais_Comunidade.csv',          // Eixo 6
    '7': 'data/eixo_Questoes_Pedagogicas.csv',              // Eixo 7
    '8': 'data/eixo_Gestao_Democratica.csv',       // Eixo 8
    '9': 'data/eixo_Documentos.csv',               // Eixo 9
    '10': 'data/eixo_Seguranca_Escola.csv',        // Eixo 10
    '11': 'data/eixo_Violencia_Indisciplina.csv',  // Eixo 11
    '12': 'data/eixo_Prestacao_Contas.csv',        // Eixo 12
    '13': 'data/eixo_Experiencia_Inovadora.csv',                // Eixo 13
    '14': 'data/eixo_Objetivos_Gestao.csv'         // Eixo 14
};// Mapeamento dos eixos para os arquivos que você TEM

function getCsvPath(eixo) {
    // Se eixo for "all" ou vazio, retorna arquivo principal
    if (!eixo || eixo === 'all') {
        return MAP_EIXOS['all'];
    }

    // Se existe no mapa, retorna o caminho
    if (MAP_EIXOS[eixo]) {
        return MAP_EIXOS[eixo];
    }

    // Fallback: arquivo principal
    return MAP_EIXOS['all'];
}

function marcarBotaoAtivo(valorEixo) {
  document.querySelectorAll('.eixo-btn').forEach(btn => {
    const ativo = btn.dataset.eixo === String(valorEixo);
    btn.classList.toggle('is-active', ativo);
    btn.setAttribute('aria-pressed', ativo ? 'true' : 'false');
  });
}

function trocarEixo(valorEixo) {
  // Define o caminho do CSV
  if (valorEixo === 'all') {
    CSV_PATH = 'data/projeto_monitor.csv';
  } else {
    CSV_PATH = getCsvPath(valorEixo); // ou MAP[valorEixo]
  }

  // Reseta ordenação e recarrega
  ordemAtual = { coluna: null, ascendente: true };
  carregarCSV();

  // Visual
  marcarBotaoAtivo(valorEixo);

  // Mensagem de status
  const status = document.getElementById('status');
  if (status) {
    status.innerHTML = `<i class="fas fa-sync-alt"></i> Carregando Eixo ${valorEixo === 'all' ? 'Completo' : valorEixo}…`;
  }
}

function configurarBotoesEixo() {
  document.querySelectorAll('.eixo-btn').forEach(btn => {
    btn.addEventListener('click', (e) => {
      e.preventDefault();
      const valor = btn.dataset.eixo; // '1', '2', ..., 'all'
      trocarEixo(valor);
    });
  });
}





// normaliza para busca (remove acentos e minúsculas)
const norm = s => String(s ?? '')
  .normalize('NFD').replace(/[\u0300-\u036f]/g, '')
  .toLowerCase();

// encontra coluna cujo nome contenha algum termo
const findCol = (cols, terms) =>
  cols.find(c => terms.some(t => norm(c).includes(norm(t))));

// converte "7,5" -> 7.5 quando for número
const toNumberIfPossible = v => {
  const s = String(v ?? '').trim();
  if (/^-?\d+(?:[.,]\d+)?$/.test(s)) return parseFloat(s.replace(',', '.'));
  return v;
};

// split de CSV respeitando aspas
function splitCSV(line, sep) {
  const out = []; let cur = ''; let inQ = false;
  for (let i = 0; i < line.length; i++) {
    const ch = line[i];
    if (ch === '"') { inQ = !inQ; continue; }
    if (ch === sep && !inQ) { out.push(cur); cur = ''; }
    else { cur += ch; }
  }
  out.push(cur);
  return out;
}



// Variáveis globais
let dadosEscolares = [];
let dadosFiltrados = [];
let ordemAtual = { coluna: null, ascendente: true };


// Inicializar a aplicação quando o DOM estiver carregado
document.addEventListener('DOMContentLoaded', function() {
  configurarBotoesEixo();   // ativa cliques nos botões de eixo
  carregarCSV();            // carrega "Tabela Completa" inicialmente
  marcarBotaoAtivo('all');  // deixa o botão "Tabela Completa" destacado
});


function carregarCSV() {
  document.getElementById('status').innerHTML =
    '<i class="fas fa-spinner fa-spin"></i> Carregando dados do CSV...';

  // cache-buster para o GitHub Pages
  fetch(`${CSV_PATH}?ts=${Date.now()}`)
    .then(r => { if (!r.ok) throw new Error('Arquivo CSV não encontrado'); return r.text(); })
    .then(csvText => {
      // normaliza quebras e BOM
      const txt = csvText.replace(/^\uFEFF/, '').replace(/\r\n/g, '\n').replace(/\r/g, '\n');
      const linhas = txt.split('\n').filter(l => l.trim() !== '');
      if (linhas.length < 2) throw new Error('CSV deve ter cabeçalho e ao menos 1 linha');

      // detecta ; ou ,
      const head = linhas[0];
      const sep = (head.split(';').length > head.split(',').length) ? ';' : ',';

      // cabeçalhos
      const headers = splitCSV(linhas[0], sep).map(h => h.trim().replace(/^"|"$/g, ''));

      // monta registros
      const rows = [];
      for (let i = 1; i < linhas.length; i++) {
        const parts = splitCSV(linhas[i], sep).map(v => v.trim().replace(/^"|"$/g, ''));
        if (!parts.length) continue;
        const row = {};
        headers.forEach((h, idx) => row[h] = toNumberIfPossible(parts[idx]));
        rows.push(row);
      }
      if (!rows.length) throw new Error('Nenhum dado válido no CSV');

      // Calcula "nota" média (0–5) a partir das colunas de escala (0–5), ignorando vazios
      const escalaCols = headers.filter(h => {
        let tot = 0, ok = 0;
        for (const r of rows) {
          const v = r[h];
          if (v === '' || v == null) continue;
          tot++;
          if (typeof v === 'number' && v >= 0 && v <= 5) ok++;
        }
        return tot > 0 && ok / tot >= 0.6; // coluna com maioria de notas 0–5
      });
      for (const r of rows) {
        let s = 0, c = 0;
        for (const h of escalaCols) {
          const v = r[h];
          if (typeof v === 'number') { s += v; c++; }
        }
        if (c) r.nota = Number((s / c).toFixed(1)); // 0–5
      }

      dadosEscolares = rows;
      dadosFiltrados = [...rows];

      inicializarFiltros();          // continua igual
      criarCabecalhoTabela();        // ver item 3 abaixo
      atualizarTabela();
      configurarEventos();
    })
    .catch(err => {
      console.error('Erro ao carregar CSV:', err);
    });
}



function inicializarFiltros() {
    if (dadosEscolares.length === 0) return;

    const colunas = Object.keys(dadosEscolares[0]);

    // Popular select de escolas (primeira coluna ou coluna que contenha "escola")
    const colunaEscola = colunas.find(col => col.toLowerCase().includes('escola')) || colunas[0];
    const escolas = [...new Set(dadosEscolares.map(d => d[colunaEscola]))].filter(e => e).sort();
    const selectEscola = document.getElementById('f-escola');
    selectEscola.innerHTML = '<option value="">Todas</option>';
    escolas.forEach(escola => {
        const option = document.createElement('option');
        option.value = escola;
        option.textContent = escola;
        selectEscola.appendChild(option);
    });

    // Popular select de municípios
    const colunaMunicipio = colunas.find(col => col.toLowerCase().includes('municipio')) ||
                           colunas.find(col => col.toLowerCase().includes('cidade')) ||
                           colunas[1];

    if (colunaMunicipio) {
        const municipios = [...new Set(dadosEscolares.map(d => d[colunaMunicipio]))].filter(m => m).sort();
        const selectMunicipio = document.getElementById('f-municipio');
        selectMunicipio.innerHTML = '<option value="">Todos</option>';
        municipios.forEach(municipio => {
            const option = document.createElement('option');
            option.value = municipio;
            option.textContent = municipio;
            selectMunicipio.appendChild(option);
        });
    }

    // Atualizar labels dos filtros baseado nas colunas do CSV
    if (colunaEscola) {
        const labelEscola = document.querySelector('label[for="f-escola"]');
        if (labelEscola) labelEscola.textContent = formatarNomeColuna(colunaEscola);
    }
    if (colunaMunicipio) {
        const labelMunicipio = document.querySelector('label[for="f-municipio"]');
        if (labelMunicipio) labelMunicipio.textContent = formatarNomeColuna(colunaMunicipio);
    }
}

function formatarNomeColuna(nomeColuna) {
  const minusculas = new Set([
    'de','da','do','das','dos','e','em','para','por',
    'a','o','as','os','no','na','nos','nas'
  ]);

  return nomeColuna
    .replace(/_/g, ' ')
    .replace(/\s+/g, ' ')
    .trim()
    .toLocaleLowerCase('pt-BR')
    .split(' ')
    .map((w, i) => (minusculas.has(w) && i > 0)
      ? w
      : w.charAt(0).toLocaleUpperCase('pt-BR') + w.slice(1))
    .join(' ');
}

function criarCabecalhoTabela() {
    if (dadosEscolares.length === 0) return;

    const thead = document.getElementById('thead');
    thead.innerHTML = ''; // Limpar cabeçalho anterior

    // Obter colunas do primeiro registro
    const colunas = Object.keys(dadosEscolares[0]);

    const tr = document.createElement('tr');
    colunas.forEach(coluna => {
        const th = document.createElement('th');
        const label = formatarNomeColuna(coluna);
        th.innerHTML = `${label} <i class="fas fa-sort"></i>`;
        th.dataset.coluna = coluna;
        th.addEventListener('click', () => ordenarTabela(coluna));
        tr.appendChild(th);
    });
    thead.appendChild(tr);
}

function atualizarTabela() {
    const tbody = document.getElementById('tbody');
    tbody.innerHTML = '';

    if (dadosFiltrados.length === 0) {
        const numColunas = dadosEscolares.length > 0 ? Object.keys(dadosEscolares[0]).length : 6;
        const tr = document.createElement('tr');
        tr.innerHTML = `<td colspan="${numColunas}" style="text-align: center; padding: 40px; color: #6c757d;"><i class="fas fa-search"></i> Nenhum resultado encontrado</td>`;
        tbody.appendChild(tr);
        atualizarStatus(0);
        return;
    }

    dadosFiltrados.forEach(registro => {
        const tr = document.createElement('tr');

        Object.entries(registro).forEach(([coluna, valor]) => {
            const td = document.createElement('td');

            // Formatação especial para colunas específicas
            if (coluna.toLowerCase().includes('nota') && typeof valor === 'number') {
                td.innerHTML = formatarNota(valor);
            } else if (coluna.toLowerCase().includes('escola') && valor) {
                // Destacar nome da escola
                td.innerHTML = `<strong>${valor}</strong>`;
            } else if (typeof valor === 'number' && valor > 100) {
                // Para números grandes (como quantidade de alunos)
                td.textContent = valor.toLocaleString('pt-BR');
            } else if (typeof valor === 'number' && coluna.toLowerCase().includes('aprovacao')) {
                // Para percentuais
                td.textContent = valor.toFixed(1) + '%';
            } else {
                td.textContent = valor || '';
            }

            tr.appendChild(td);
        });

        tbody.appendChild(tr);
    });

    atualizarStatus(dadosFiltrados.length);
}

function formatarNota(nota) {
    let classe = 'baixa';
    if (nota >= 8) classe = 'alta';
    else if (nota >= 7) classe = 'media';

    return `<span class="nota ${classe}">${nota.toFixed(1)}</span>`;
}

function atualizarStatus(total) {
    const status = document.getElementById('status');
    status.textContent = `Exibindo ${total} de ${dadosEscolares.length} registros`;
}

function aplicarFiltros() {
    if (dadosEscolares.length === 0) return;

    const colunas = Object.keys(dadosEscolares[0]);
    const colunaEscola = colunas.find(col => col.toLowerCase().includes('escola')) || colunas[0];
    const colunaMunicipio = colunas.find(col => col.toLowerCase().includes('municipio')) ||
                           colunas.find(col => col.toLowerCase().includes('cidade')) ||
                           colunas[1];
    const colunaNota = colunas.find(col => col.toLowerCase().includes('nota'));

    const escolaSelecionada = document.getElementById('f-escola').value;
    const municipioSelecionado = document.getElementById('f-municipio').value;
    const notaMinima = parseFloat(document.getElementById('f-nota-min').value) || 0;
    const buscaLivre = document.getElementById('f-busca').value.toLowerCase().trim();

    dadosFiltrados = dadosEscolares.filter(registro => {
        // Filtro por escola
        if (escolaSelecionada && registro[colunaEscola] !== escolaSelecionada) {
            return false;
        }

        // Filtro por município
        if (municipioSelecionado && colunaMunicipio && registro[colunaMunicipio] !== municipioSelecionado) {
            return false;
        }

        // Filtro por nota mínima
        if (colunaNota && notaMinima > 0 && registro[colunaNota] < notaMinima) {
            return false;
        }

        // Busca livre (procura em todos os campos de texto)
        if (buscaLivre) {
            const textoCompleto = Object.values(registro)
                .filter(valor => typeof valor === 'string')
                .join(' ')
                .toLowerCase();

            if (!textoCompleto.includes(buscaLivre)) {
                return false;
            }
        }

        return true;
    });

    atualizarTabela();
}

function ordenarTabela(coluna) {
    // Alternar ordem se clicar na mesma coluna
    if (ordemAtual.coluna === coluna) {
        ordemAtual.ascendente = !ordemAtual.ascendente;
    } else {
        ordemAtual.coluna = coluna;
        ordemAtual.ascendente = true;
    }

    dadosFiltrados.sort((a, b) => {
        let valorA = a[coluna];
        let valorB = b[coluna];

        // Tratar valores nulos ou undefined
        if (valorA == null) valorA = '';
        if (valorB == null) valorB = '';

        // Comparação numérica
        if (typeof valorA === 'number' && typeof valorB === 'number') {
            return ordemAtual.ascendente ? valorA - valorB : valorB - valorA;
        }

        // Comparação de strings
        valorA = valorA.toString().toLowerCase();
        valorB = valorB.toString().toLowerCase();

        if (valorA < valorB) {
            return ordemAtual.ascendente ? -1 : 1;
        }
        if (valorA > valorB) {
            return ordemAtual.ascendente ? 1 : -1;
        }
        return 0;
    });

    // Atualizar ícones de ordenação
    document.querySelectorAll('th i').forEach(icone => {
        icone.className = 'fas fa-sort';
    });

    const thAtual = document.querySelector(`th[data-coluna="${coluna}"] i`);
    if (thAtual) {
        thAtual.className = ordemAtual.ascendente ? 'fas fa-sort-up' : 'fas fa-sort-down';
    }

    atualizarTabela();
}

function limparFiltros() {
    document.getElementById('f-escola').value = '';
    document.getElementById('f-municipio').value = '';
    document.getElementById('f-nota-min').value = '';
    document.getElementById('f-busca').value = '';

    dadosFiltrados = [...dadosEscolares];
    atualizarTabela();
}



let eventosConfigurados = false;

function configurarEventos() {
  if (eventosConfigurados) return;  // impede duplicar listeners

  document.getElementById('f-escola').addEventListener('change', aplicarFiltros);
  document.getElementById('f-municipio').addEventListener('change', aplicarFiltros);
  document.getElementById('f-nota-min').addEventListener('input', aplicarFiltros);
  document.getElementById('f-busca').addEventListener('input', aplicarFiltros);
  document.getElementById('btn-limpar').addEventListener('click', limparFiltros);

  eventosConfigurados = true;
}
