// menu.js - Sistema de menu com suporte a inje√ß√£o jQuery
(function () {
  'use strict';

  function getParts() {
    const header = document.querySelector("#novo_background");
    if (!header) return {};
    return {
      header,
      btn: header.querySelector(".menu-toggle"),
      nav: header.querySelector(".navbar-nav"),
    };
  }

  function openMenu(parts) {
    if (!parts.nav) return;
    parts.nav.classList.add("open");
    if (parts.btn) {
      parts.btn.setAttribute("aria-expanded", "true");
      parts.btn.classList.add("active");
    }
    document.body.classList.add("menu-open");
    console.log("‚úÖ Menu aberto");
  }

  function closeMenu(parts) {
    if (!parts.nav) return;
    parts.nav.classList.remove("open");
    if (parts.btn) {
      parts.btn.setAttribute("aria-expanded", "false");
      parts.btn.classList.remove("active");
    }
    document.body.classList.remove("menu-open");
    console.log("‚úÖ Menu fechado");
  }

  function toggleMenu(parts) {
    if (parts.nav.classList.contains("open")) {
      closeMenu(parts);
    } else {
      openMenu(parts);
    }
  }

  function closeAllDropdowns() {
    document
      .querySelectorAll(".nav-item.dropdown.open")
      .forEach((el) => {
        el.classList.remove("open");
      });
  }

  function toggleDropdown(dropdownItem) {
    const isOpen = dropdownItem.classList.contains("open");

    // Fecha todos os outros dropdowns
    document
      .querySelectorAll(".nav-item.dropdown.open")
      .forEach((el) => {
        if (el !== dropdownItem) {
          el.classList.remove("open");
        }
      });

    // Toggle do dropdown atual
    if (isOpen) {
      dropdownItem.classList.remove("open");
      console.log("üîΩ Dropdown fechado");
    } else {
      dropdownItem.classList.add("open");
      console.log("üîº Dropdown aberto");
    }
  }

  // === INIT: for√ßa come√ßar SEMPRE fechado ===
  function initMenu() {
    const parts = getParts();
    if (!parts.header || !parts.nav) {
      console.warn("‚ö†Ô∏è Header ou nav n√£o encontrado");
      return;
    }

    console.log("üîß Inicializando menu...");

    // FOR√áA estado inicial fechado (CR√çTICO para jQuery .load)
    parts.nav.classList.remove("open");
    parts.nav.style.display = ""; // Remove display inline se houver

    if (parts.btn) {
      parts.btn.setAttribute("aria-expanded", "false");
      parts.btn.classList.remove("active");
    }

    document.body.classList.remove("menu-open");
    closeAllDropdowns();
    

    // No mobile, garante que come√ßa escondido
    if (window.innerWidth <= 768) {
      parts.nav.style.display = "none";
      setTimeout(() => {
        parts.nav.style.display = ""; // Remove depois para o CSS assumir
      }, 50);
    }

    console.log("üöÄ Menu inicializado - Estado:", {
      menuAberto: parts.nav.classList.contains("open"),
      display: parts.nav.style.display,
      viewport: window.innerWidth + "px"
    });
  }

  // === OBSERVADOR DE MUTA√á√ÉO (detecta quando jQuery injeta o header) ===
  function watchForHeader() {
    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        mutation.addedNodes.forEach((node) => {
          if (node.nodeType === 1) { // Element node
            if (node.id === 'novo_background' || node.querySelector('#novo_background')) {
              console.log("üîç Header injetado detectado!");
              setTimeout(initMenu, 50); // Aguarda o DOM se estabilizar
              observer.disconnect(); // Para de observar depois que encontrou
            }
          }
        });
      });
    });

    // Observa mudan√ßas no body e no header-placeholder
    const targets = [
      document.body,
      document.getElementById('header-placeholder')
    ].filter(Boolean);

    targets.forEach(target => {
      observer.observe(target, {
        childList: true,
        subtree: true
      });
    });

    console.log("üëÅÔ∏è Observador de header ativo");
  }

  // === EVENT LISTENERS ===

  // 1. Quando DOM estiver pronto
  if (document.readyState === 'loading') {
    document.addEventListener("DOMContentLoaded", function() {
      initMenu();
      watchForHeader(); // Ativa o observador
    });
  } else {
    initMenu();
    watchForHeader();
  }

  // 2. Quando header for injetado via jQuery (evento customizado)
  document.addEventListener("header:loaded", function() {
    console.log("üì° Evento header:loaded recebido");
    setTimeout(initMenu, 100);
  });

  // 3. Quando window carregar completamente
  window.addEventListener("load", function() {
    console.log("üåê Window load completo");
    setTimeout(initMenu, 100);
  });

  // === DELEGA√á√ÉO DE EVENTOS GLOBAL ===
  document.addEventListener("click", function (e) {
    const parts = getParts();
    if (!parts.nav) return;

    // === HAMBURGER ===
    const hamburger = e.target.closest(".menu-toggle");
    if (hamburger) {
      e.preventDefault();
      e.stopPropagation();
      toggleMenu(parts);
      return;
    }

    // === DROPDOWN TOGGLE ===
    const ddToggle = e.target.closest(".dropdown-toggle");
    if (ddToggle) {
      e.preventDefault();
      e.stopPropagation();
      const dropdownItem = ddToggle.closest(".nav-item.dropdown");
      if (dropdownItem) {
        toggleDropdown(dropdownItem);
      }
      return;
    }

    // === CLICK EM LINK DO DROPDOWN ===
    const dropdownLink = e.target.closest(".dropdown-item");
    if (dropdownLink && !dropdownLink.classList.contains("dropdown-toggle")) {
      console.log("üìé Link do dropdown clicado");
      closeAllDropdowns();
      if (window.innerWidth <= 768 && parts.nav.classList.contains("open")) {
        setTimeout(() => closeMenu(parts), 150);
      }
      return;
    }

    // === CLICK EM LINK NORMAL DO NAV ===
    const navLink = e.target.closest(".nav-link:not(.dropdown-toggle)");
    if (navLink) {
      console.log("üìé Link do nav clicado");
      closeAllDropdowns();
      if (window.innerWidth <= 768 && parts.nav.classList.contains("open")) {
        setTimeout(() => closeMenu(parts), 150);
      }
      return;
    }

    // === CLICK FORA DO MENU ===
    const clickedInsideNav = e.target.closest(".navbar-nav");
    const clickedInsideToggle = e.target.closest(".menu-toggle");

    if (!clickedInsideNav && !clickedInsideToggle) {
      closeAllDropdowns();
      if (parts.nav.classList.contains("open")) {
        closeMenu(parts);
      }
    }
  });

  // === ESC FECHA TUDO ===
  document.addEventListener("keydown", function (e) {
    if (e.key === "Escape") {
      const parts = getParts();
      closeAllDropdowns();
      if (parts.nav && parts.nav.classList.contains("open")) {
        closeMenu(parts);
      }
    }
  });

  // === RESIZE: fecha dropdowns e menu mobile ===
  let resizeTimer;
  window.addEventListener("resize", function() {
    clearTimeout(resizeTimer);
    resizeTimer = setTimeout(() => {
      closeAllDropdowns();

      if (window.innerWidth > 768) {
        const parts = getParts();
        if (parts.nav && parts.nav.classList.contains("open")) {
          closeMenu(parts);
        }
      }

      console.log("üìê Resize:", window.innerWidth + "px");
    }, 250);
  });

  // === DEBUG ===
  window.debugMenu = function() {
    const parts = getParts();
    console.log("üîç Debug Menu:");
    console.log("- Header existe?", !!parts.header);
    console.log("- Nav existe?", !!parts.nav);
    console.log("- Toggle existe?", !!parts.btn);
    console.log("- Menu aberto?", parts.nav?.classList.contains("open"));
    console.log("- Display nav:", parts.nav?.style.display);
    console.log("- Dropdowns:", document.querySelectorAll(".nav-item.dropdown").length);
    console.log("- Dropdowns abertos:", document.querySelectorAll(".nav-item.dropdown.open").length);
    console.log("- Viewport:", window.innerWidth + "x" + window.innerHeight);
  };

  console.log("‚úÖ Sistema de menu carregado");
})();